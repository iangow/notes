---
title: "Stock prices"
author: 
  - name: Ian D. Gow
    orcid: 0000-0002-6243-8409
    email: iandgow@gmail.com
date: 2025-02-17
number-sections: true
format:
  html:
    default
  pdf: 
    include-in-header:
      text: |
        \usepackage[group-digits = integer, group-separator={,}, group-minimum-digits = 4]{siunitx}
        \usepackage{scrextend}
        \deffootnote{1.6em}{1.6em}{\thefootnotemark.\enskip}
        \addtokomafont{disposition}{\rmfamily}
        \sisetup{output-decimal-marker = {,}}
    colorlinks: true
    geometry:
      - left=2cm
      - right=2cm
    papersize: a4
    mainfont: TeX Gyre Pagella
    mathfont: TeX Gyre Pagella Math
bibliography: papers.bib
---

:::{#tip-pkgs .callout-tip text-align="left"}
The code in this chapter uses the packages listed below.
For instructions on how to set up your computer to use the code found in this book, see @sec-install.
Quarto templates for the exercises below are available on [GitHub](https://github.com/iangow/far_templates/blob/main/README.md).
:::

```{r}
#| warning: false
library(tidyquant)
library(tidyverse)
```

# The company

The limited-liability company is one of the great inventions of the nineteenth century.

The basic unit of ownership of a company is a share.
Many companies have a single class of share in which share entitles the holder to an equal share (go figure?) in any distributions to shareholders.

To better understand shares and stock prices, we focus initially on one company, Domino’s Pizza Enterprises Ltd ("Domino's").
According to its [website](https://www.dominos.com.au/about-us), Domino's is "the Australian-owned master franchise holder for Domino’s in Australia, New Zealand, Belgium, France, the Netherlands, Japan, Germany, Luxembourg, Taiwan, Malaysia, Singapore and Cambodia."
Domino's is a distinct entity from the American firm Domino's Pizza, Inc.

Stock prices symbolize capitalism in more ways than one.
For example, it's actually difficult to identify a completely open source of data on stock prices for many stock exchanges.
Typically databases on stock prices are behind paywalls and the like and so it is difficult for to just post pre-processed data.

That said, there are many websites that redistribute stock price data in a form that we can access readily.
One such site is Yahoo Finance (Yahoo) and if you type "Domino's Pizza Enterprises" into the search bar of that site, you will learn that the **ticker** for Domino's is, for the purposes of Yahoo is `DMP.AX`.
If you go to <https://finance.yahoo.com/quote/DMP.AX>, you will see information about Domino's, including news, financials, and historical stock prices.

While, in principle, we could download historical stock prices directly from <https://finance.yahoo.com/quote/DMP.AX/history/>, we will find it easier to use `tq_get()` from the `tidyquant` package to get these prices.
 

```{r}
ticker <- "DMP.AX"
start_date <- "2016-12-29"
end_date <- "2024-12-31"
dmp_prices <- tq_get(ticker, from = start_date, to = end_date)
```



If we look at the data, we see the following:

```{r}
dmp_prices
```

The first thing to note is that we appear to have *daily* data.
There are gaps in the data (e.g., where is `2017-01-06`?), but this can be explained by the fact that most stock exchanges do not trade on weekends, including the Australian Stock Exchange (ASX) on which Domino's trades.

However, an element of mystery enters when we check the days of the week associated with each date.

```{r}
dmp_prices |> 
  mutate(dow = wday(date, label = TRUE)) |> 
  count(dow)
```

So we see data for Sundays, which are not trading days for the ASX.^[It is surprisingly difficult to find confirmation of this fact on the [ASX website](https://www.asx.com.au/markets/market-resources/trading-hours-calendar/cash-market-trading-hours/trading-calendar).]
What has caused this apparent misalignment of data with dates?
A number of possible explanations come to mind.
Perhaps the dates reflected the date in a different time zone at a point in the relevant Australian time zone.^[I assume that the applicable Australian time zone is `Australia/Sydney` given that the ASX is headquartered in Sydney.]
For example, the closing time of 4pm Sydney time might be expressed in local time in Sunnyvale, California (the headquarters location of Yahoo) or in New York time, the financial capital of Yahoo's home country.
Or perhaps the opening time of 10am Sydney time is converted to Universal Coordinated Time (UTC).

The following function `fix_date()` takes a date, converts it to a timestamp as if it's a local time in `Australia/Sydney` time zone, then converts it a date using UTC. 
If the UTC date (`x_utc`) is the same date as `x`, then `diff` will equal zero and the original value `x` will be returned unchanged.
If the UTC date (`x_utc`) is a different date from `x`---that is, a day behind---then `diff` will equal one and the date one day after `x` will be returned.
In either case, we hope to have the original date applicable to the ASX.

```{r}
fix_date <- function(x) {
  time <- as.POSIXct(str_c(as.character(x), " 10:00:00"),
                     tz = "Australia/Sydney")
  x_utc <- as.Date(time, tz = "UTC")
  diff <- x - x_utc
  x + diff
}
```

We apply `fix_date()` in the following code to create a new version of `dmp_prices`:

```{r}
dmp_prices <- 
  tq_get(ticker, from = start_date, to = end_date) |>
  mutate(date = fix_date(date))
```

Now we can check the day of the week of the dates on `dmp_prices` and can see that there are no more Sundays and many more Fridays than we had before, suggesting that we have correctly shifted the dates.

```{r}
dmp_prices |> mutate(dow = wday(date, label = TRUE)) |> count(dow)
```

```{r}
#| include: false
dmp_prices |> arrow::write_parquet("data/dmp.parquet")
dmp_prices <- arrow::read_parquet("data/dmp.parquet")
```

Having fixed `date`, we can shift our attention to the other fields in `dmp_prices`:

- `open`: The price at which the stock started trading when the market opened on `date`.
- `high`: The highest price the stock reached during trading on `date`.
- `low`: The lowest price the stock reached during trading on `date`.
- `close`: The last price at which the stock was traded when the market closed for `date`.
-	`volume`: The total number of shares traded on `date`.
-	`adjusted`: The closing price adjusted for corporate actions such as dividends, stock splits, and other events to reflect the stock’s actual value over time.

## Dividends

As mentioned above, the core idea of a share in a company is that it entitles the holder to an equal share in any distributions to shareholders.
The most familiar form of distribution is the cash dividend. 
Cash dividends are generally expressed on a per-share basis (e.g., 50.4 cents per share) with all shareholders in a given **class** receiving the same per-share the company
Most companies have a single class of shares.
For many firms with multiple classes of shares, the dividends paid are the same for all classes, but shares from different classes have different voting rights.

The first trading day on which the purchaser of a stock does not get the right to receive the previously declared dividend is the **ex-dividend date**.
In other words, buying the stock before the ex-dividend date occurs on a **cum dividend** basis, in that the purchaser gets the right to the upcoming dividend.

The date when the company checks its books to determine who the dividend should be paid to is the **record date**.
The date when the dividend is actually paid to shareholders is the **payment date**.

A central idea of finance is that the value of a stock equals (the sum of) the present value of future dividends.^[TODO: Discuss present value in an earlier chapter.]
If the present value of dividends exceeded the stock price, then there would be extra demand for the stock, and this demand would push the price up.
If the present value of dividends was lower than the stock price, then shareholders would rather sell the stock, and this would push the price down.
Thus, in equilbrium, we expect the present value of dividends to equal the stock price.^[TODO: Direct readers to further reading on this topic.]

We can get data on dividends for using `tq_get()` with the argument `get = "dividends"`.^[Because the issue with dates discussed above appears to apply to these data, I use `fix_date()` to address this issue.]

```{r}
dmp_divs <- 
  tq_get(ticker, from = start_date, to = end_date, 
         get = "dividends") |>
  mutate(date = fix_date(date))
```

### Exercises


1. Confirm ex-dividend dates.

2. 

## Cumulative returns

Many analyses in finance involve comparison of alternative investment strategies and a standard analysis of such strategies involves **backtesting**, which typically involves conducting a kind of thought experiment in which it is assumed that we can go back in time and implement the investment strategy and evaluate how it would have performed given the historical returns on the securities invested in as part of the strategy.

For the purposes of this chapter, I will assume that the strategy we are interested in involved purchasing stock in `r ticker` at the close of `r start_date` and holding that stock until selling it at the close of `r end_date`.

```{r}
start_price <-
  dmp_prices |> 
  filter(date == start_date) |>
  select(close) |> 
  pull()

end_price <-
  dmp_prices |> 
  filter(date == end_date) |>
  select(close) |> 
  pull()

total_divs <-
  dmp_divs |> 
  summarize(divs = sum(value)) |>
  pull()
```


During that time, we would have seen the stock go from `r round(start_price, 4)` (`start_price`) to `r round(end_price, 4)` (`end_price`) while receiving `r round(total_divs, 4)` (`total_divs`) in dividends.
So one calculation of the **gross return** would be the following (here $p_s$ and $p_t$ refer to the close prices on `r start_date` and `r end_date`, respectively, and the expression involving $d_i$ refers to dividends paid between those dates).

$$ r_{s, t} = \frac{p_t + \sum_{i: i \in (s, t]} d_i}{p_s}$$
The numerator equals `r round(end_price + total_divs, 4)` and the denominator equals `r round(start_price, 4)`, yielding a gross return of `r 100*round((end_price + total_divs) /start_price, 4)`%, or a net return of  `r 100*round((end_price + total_divs) /start_price - 1, 4)`%.
But an astute reader might have noticed that, by simply summing up the dividends ($\sum_{i: i \in (s, t]} d_i$), we are effectively assuming that the dividends are stored in an interest-free account, or perhaps under a mattress, until the time comes to tally them up to calculate returns.

A more conventional approach is to assume that the dividends are reinvested in the stock itself at the close price on the ex-dividend date.

```{r}
#| include: false
options(pillar.sigfig = 4)
```

```{r}
dmp_rets <-
  dmp_prices |>
  left_join(dmp_divs, by = join_by(symbol, date)) |>
  group_by(symbol) |>
  arrange(date) |>
  mutate(lag_close = lag(close),
         dividend = coalesce(value, 0)) |>
  select(symbol, date, close, lag_close, dividend) |>
  mutate(ret = (close + dividend) / lag_close) |>
  mutate(share_multiplier = cumprod(coalesce(1 + dividend / close, 1)),
         cumret = cumprod(coalesce(ret, 1))) |>
  ungroup() |>
  arrange(desc(date))
```


```{r}
#| include: false
div_stuff <-
  dmp_rets |>
  arrange(date) |>
  filter(dividend != 0)
```

Take the first dividend paid in our sample period, that with an ex-dividend date of `r div_stuff$date[1]`.
At a close price of `r round(div_stuff$close[1], 4)`, this dividend of `r round(div_stuff$dividend[1], 4)` could be used to purchase `r round(div_stuff$dividend[1]/div_stuff$close[1], 4)` additional shares, so we now have `r round(1 + div_stuff$dividend[1]/div_stuff$close[1], 4)` shares.

Moving to the second dividend paid in our sample period, which had an ex-dividend date of `r div_stuff$date[3]`.
At a close price of `r round(div_stuff$close[2], 4)`, this dividend of `r round(div_stuff$dividend[2], 4)` per share on `r round(1 + div_stuff$dividend[1]/div_stuff$close[1], 4)` shares, could be used to purchase `r round(div_stuff$dividend[2]/div_stuff$close[2] * (1 + div_stuff$dividend[1]/div_stuff$close[1]), 4)` additional shares, so we now have `r round(div_stuff$share_multiplier[2], 4)` shares.

```{r}
#| include: false
final_mult <-
  div_stuff |> 
  filter(date == max(date)) |>
  select(share_multiplier) |> 
  pull()
```

Applying this process to each dividend, we end up with `r round(final_mult, 4)` shares for each share we started with.
With each of these shares having a price of `r round(end_price, 4)`, we have a return of `r round(final_mult * end_price, 4)` on an initial investment of `r round(start_price, 4)` for a gross return of `r round(final_mult * end_price / start_price, 4) * 100`%.

## Adjusted prices
	
Focusing on the two closing prices---`close` and `adjusted`---the natural first question is what does the word "adjusted" mean?
As we have done before, we will use the data and our knowledge of the setting to infer the meaning of this word.
Knowing what plot can reveal quickly, we can create @fig-adj-ratio. 

```{r}
#| label: fig-adj-ratio
#| fig-cap: Ratio of `adjusted` to `close` over time
dmp_prices |>
  mutate(adj_ratio = adjusted / close) |>
  ggplot(aes(x = date, y = adj_ratio)) +
  geom_line()
```

We see a couple of things in @fig-adj-ratio.
First, the `adj_ratio` (defined as `adjusted` divided by `close`) equals one at the end of the period of our data set.
Second, it appears that `adj_ratio` is a step function with respect to time: it is constant for periods, then steps up in discrete amounts on certain dates.
This latter fact is consistent with "corporate actions such as dividends" occurring relatively infrequently on discrete dates.

In practice, the most common "corporate action" is the payment of dividends.

In the following code, I calculate `adj_amt`, which represents the amount of the dividend implied by the values in `close` and `adjusted` on a given trading day and the previous day.

```{r}
dmp_adjs <-
  dmp_prices |>
  select(symbol, date, close, adjusted) |>
  mutate(adj_ratio = adjusted / close) |>
  group_by(symbol) |>
  arrange(date) |>
  mutate(lag_close = lag(close),
         lag_adjusted = lag(adjusted),
         adj_amt = round(lag(close) - lag(adjusted) / adj_ratio, 4)) |>
  ungroup() |>
  arrange(desc(date))
```

The amounts in `adj_amt` below can be compared with the amounts reported by the company in filings with the ASX.
For example, we can [confirm](https://cdn-api.markitdigital.com/apiman-gateway/ASX/asx-research/1.0/file/2924-02774825-2A1506103) the \$0.555 dividend with an ex-dividend date of 2024-02-26 and also [confirm](https://cdn-api.markitdigital.com/apiman-gateway/ASX/asx-research/1.0/file/2924-02700627-2A1468084) the \$0.426 dividend with an ex-dividend date of 2023-08-28.

```{r}
dmp_adjs |>
  select(-symbol, -adj_ratio) |>
  filter(adj_amt != 0) |>
  head()
```
So this provides verification of the formula I used to calculate `adj_amt`.
But where did this calculation come from?
Alternatively, how are the dividends incorporated into the values for `adjusted`?
Answering the latter question will actually provide the answer to the former.

```{r}
#| include: false
example_data <-
  dmp_adjs |>
  select(-symbol, -adj_ratio) |>
  filter(adj_amt != 0)

row <- 1
```


Taking the first value from above, we can imagine that if we purchased the stock at the closing price (\$`r round(example_data$lag_close[row], 4)`) on the trading day prior to `r round(example_data$date[row], 4)` and then sold at the closing price (\$`r round(example_data$close[row], 4)`) on the ex-dividend date, we could enjoy a capital appreciation of \$`r round(example_data$close[row] - example_data$lag_close[row], 4)` plus the dividend of \$`r example_data$adj_amt[row]` for a total per-share dollar return of \$`r round(example_data$close[row] - example_data$lag_close[row] + example_data$adj_amt[row], 4)`.
This implies a percentage return of `r round(100 * (example_data$close[row] - example_data$lag_close[row] + example_data$adj_amt[row]) / example_data$lag_close[row], 4)`%.

If we use the `adjusted` data directly we would divide `r round(example_data$adjusted[row], 4)` by `r round(example_data$lag_adjusted[row], 4)` and subtract `1` to get a percentage return of `r round(100 * (example_data$adjusted[row] / example_data$lag_adjusted[row] - 1), 4)`%.

Oh. There's slight difference here!

It can be shown that the returns on embedded in `adjusted` can be calculated as

$$ r_{t} = \frac{a_{t}}{a_{t-1}} - 1 = \frac{c_{t}}{c_{t-1} - d_{t}} - 1. $$ 
Checking this with $c_t = `r round(example_data$close[row], 4)`$, $c_{t-1} = `r round(example_data$lag_close[row], 4)`$, and $d_t = `r round(example_data$adj_amt[row], 4)`$, we get `r round(100 * (example_data$close[row]/ (example_data$lag_close[row] - example_data$adj_amt[row]) - 1), 4)`%.



```{r}
rets_df <-
  dmp_prices |>
  group_by(symbol) |>
  arrange(date) |>
  mutate(ret_1 = close / lag(close) - 1,
         ret_2 = adjusted / lag(adjusted) - 1,
         adj_close = lag(close) * (1 + ret_2)) |>
  ungroup() |>
  mutate(close_diff = close - adjusted)

rets_df |>
  filter(abs(ret_1 - ret_2) > 0.000001)

rets_df |>
  filter(between(date, as.Date("2024-08-23"), as.Date("2024-08-30")))
```
