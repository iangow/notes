---
title: "Stock prices"
author: 
  - name: Ian D. Gow
    orcid: 0000-0002-6243-8409
    email: iandgow@gmail.com
date: 2025-02-17
number-sections: true
format:
  html:
    default
  pdf: 
    include-in-header:
      text: |
        \usepackage[group-digits = integer, group-separator={,}, group-minimum-digits = 4]{siunitx}
        \usepackage{scrextend}
        \deffootnote{1.6em}{1.6em}{\thefootnotemark.\enskip}
        \addtokomafont{disposition}{\rmfamily}
        \sisetup{output-decimal-marker = {,}}
    colorlinks: true
    geometry:
      - left=2cm
      - right=2cm
    papersize: a4
    mainfont: TeX Gyre Pagella
    mathfont: TeX Gyre Pagella Math
bibliography: papers.bib
---

:::{#tip-pkgs .callout-tip text-align="left"}
The code in this chapter uses the packages listed below.
For instructions on how to set up your computer to use the code found in this book, see @sec-install.
Quarto templates for the exercises below are available on [GitHub](https://github.com/iangow/far_templates/blob/main/README.md).
:::

```{r}
#| warning: false
library(tidyquant)
library(tidyverse)
```

# The company

The limited-liability company is one of the great inventions of the nineteenth century.

The basic unit of ownership of a company is a share.
Many companies have a single class of share.
Each share entitles the holder to a equal share (go figure?) in any distributions to owners.

To better understand shares and stock prices, we focus initially on one company, Domino’s Pizza Enterprises Ltd ("Domino's").
According to its [website](https://www.dominos.com.au/about-us), Domino's is "the Australian-owned master franchise holder for Domino’s in Australia, New Zealand, Belgium, France, the Netherlands, Japan, Germany, Luxembourg, Taiwan, Malaysia, Singapore and Cambodia."
Domino's is a distinct entity from the American firm, Domino's Pizza, Inc.

Stock prices symbolize capitalism in more ways than one.
For example, it's actually difficult to identify a completely open source of data on stock prices for many stock exchanges.
Typically databases on stock prices are behind paywalls and the like and so it is difficult for to just post pre-processed data.

That said, there are many websites that redistribute stock price data in a form that we can access readily.
One such site is Yahoo Finance (Yahoo) and if you type "Domino's Pizza Enterprises" into the search bar of that site, you will learn that the **ticker** for Domino's is, for the purposes of Yahoo is `DMP.AX`.
If you go to <https://finance.yahoo.com/quote/DMP.AX>, you will see information about Domino's, including news, financials, and historical stock prices.

While, in principle, we could download historical stock prices directly from <https://finance.yahoo.com/quote/DMP.AX/history/>, we will find it easier to use `tq_get()` from the `tidyquant` package to get these prices.
 

```{r}
ticker <- "DMP.AX"
ticker <- "KO"
dmp_df <- tq_get(ticker, from = "2017-01-01", to = "2024-12-31")
```

If we look at the data, we see the following:

```{r}
dmp_df
```
The first thing to note is that we appear to have *daily* data.
There are gaps in the data (e.g., where is `2017-01-06`?), but this can be explained by the fact that most stock exchanges do not trade on weekends, including the Australian Stock Exchange (ASX) on which Domino's trades.

However, an element of mystery enters when we check the days of the week associated with each date.

```{r}
dmp_df |> 
  mutate(dow = wday(date, label = TRUE)) |> 
  count(dow)
```

So we see data for Sundays, which are not trading days for the ASX.^[It is surprisingly difficult to find confirmation of this fact on the [ASX website](https://www.asx.com.au/markets/market-resources/trading-hours-calendar/cash-market-trading-hours/trading-calendar).]
What has caused this apparent misalignment of data with dates?
A number of possible explanations come to mind.
Perhaps the dates reflected the date in a different time zone at a point in the relevant Australian time zone.^[I assume that the applicable Australian time zone is `Australia/Sydney` given that the ASX is headquartered in Sydney.]
For example, the closing time of 4pm Sydney time might be expressed in local time in Sunnyvale, California (the headquarters location of Yahoo) or in New York time, the financial capital of Yahoo's home country.
Or perhaps the opening time of 10am Sydney time is converted to Universal Coordinated Time (UTC).

The following function `fix_date()` takes a date, converts it to a timestamp as if it's a local time in `Australia/Sydney` time zone, then converts it a date using UTC. 
If the UTC date (`x_utc`) is the same date as `x`, then `diff` will equal zero and the original value `x` will be returned unchanged.
If the UTC date (`x_utc`) is a different date from `x`---that is, a day behind---then `diff` will equal one and the date one day after `x` will be returned.
In either case, we hope to have the original date applicable to the ASX.

```{r}
fix_date <- function(x) {
  time <- as.POSIXct(str_c(as.character(x), " 10:00:00"),
                     tz = "Australia/Sydney")
  x_utc <- as.Date(time, tz = "UTC")
  diff <- x - x_utc
  x + diff
}
```

We apply `fix_date()` in the following code to create a new version of `dmp_df`:

```{r}
dmp_df <- 
  tq_get(ticker, from = "2017-01-01", to = "2024-12-31") |>
  mutate(date = fix_date(date))
```

Now we can check the day of the week of the dates on `dmp_df` and can see that there are no more Sundays and many more Fridays than we had before, suggesting that we have correctly shifted the dates.

```{r}
dmp_df |> mutate(dow = wday(date, label = TRUE)) |> count(dow)
```

```{r}
#| include: false
dmp_df |> arrow::write_parquet("data/dmp.parquet")
dmp_df <- arrow::read_parquet("data/dmp.parquet")
```

Having fixed `date`, we can shift our attention to the other fields in `dmp_df`:

- `open`: The price at which the stock started trading when the market opened on `date`.
- `high`: The highest price the stock reached during trading on `date`.
- `low`: The lowest price the stock reached during trading on `date`.
- `close`: The last price at which the stock was traded when the market closed for `date`.
-	`volume`: The total number of shares traded on `date`.
-	`adjusted`: The closing price adjusted for corporate actions such as dividends, stock splits, and other events to reflect the stock’s actual value over time.
	
Focusing on the two closing prices---`close` and `adjusted`---the natural first question is what does the word "adjusted" mean?
As we have done before, we will use the data and our knowledge of the setting to infer the meaning of this word.
Knowing what plot can reveal quickly, we can create @fig-adj-ratio. 

```{r}
#| label: fig-adj-ratio
#| fig-cap: Ratio of `adjusted` to `close` over time
dmp_df |>
  mutate(adj_ratio = adjusted / close) |>
  ggplot(aes(x = date, y = adj_ratio)) +
  geom_line()
```

We see a couple of things in @fig-adj-ratio.
First, the `adj_ratio` (defined as `adjusted` divided by `close`) equals one at the end of the period of our data set.
Second, it appears that `adj_ratio` is a step function with respect to time: it is constant for periods, then steps up in discrete amounts on certain dates.
This latter fact is consistent with "corporate actions such as dividends" occurring relatively infrequently on discrete dates.

In practice, the most common "corporate action" is the payment of dividends.

 - **Dividend**: A distribution made by a company to its shareholders, usually from profits, either in cash or additional shares. 
 Cash dividends are generally expressed on a per-share basis (e.g., 50.4 cents per share) with all shareholders in a given **class**.
 Most companies have a single class of shares.
 For firms with multiple classes of shares, the dividends paid are the same
 - **Cum Dividend**: When a stock is purchased *cum dividend*, the purchaser getsthe right to the upcoming dividend. If you buy the stock before the ex-dividend date, you will receive the associated dividend payment.
 - **Ex-Dividend Date**: The first trading day on which a stock no longer carries the right to receive the previously declared dividend. 
 If you buy the stock on or after the ex-dividend date, you will not receive the upcoming dividend.
	•	
	•	**Record Date**: The date when the company checks its books to determine who the dividend should be paid to. Due to stock exchange settlement rules, you must buy the stock before the ex-dividend date to receive the dividend.
	-	**Payment Date**: The date when the dividend is actually paid to shareholders.

In the following code, I calculate `adj_amt`, which represents the amount of the dividend implied by the values in `close` and `adjusted` on a given trading day and the previous day.

```{r}
dmp_adjs <-
  dmp_df |>
  select(symbol, date, close, adjusted) |>
  mutate(adj_ratio = adjusted / close) |>
  group_by(symbol) |>
  arrange(date) |>
  mutate(lag_close = lag(close),
         lag_adjusted = lag(adjusted),
         adj_amt = round(lag(close) - lag(adjusted) / adj_ratio, 4)) |>
  ungroup() |>
  arrange(desc(date))
```

The amounts in `adj_amt` below can be compared with the amounts reported by the company in filings with the ASX.
For example, we can [confirm](https://cdn-api.markitdigital.com/apiman-gateway/ASX/asx-research/1.0/file/2924-02774825-2A1506103) the \$0.555 dividend with an ex-dividend date of 2024-02-26 and also [confirm](https://cdn-api.markitdigital.com/apiman-gateway/ASX/asx-research/1.0/file/2924-02700627-2A1468084) the \$0.426 dividend with an ex-dividend date of 2023-08-28.

```{r}
dmp_adjs |>
  select(-symbol, -adj_ratio) |>
  filter(adj_amt != 0) |>
  head()
```
So this provides verification of the formula I used to calculate `adj_amt`.
But where did this calculation come from?
Alternatively, how are the dividends incorporated into the values for `adjusted`?
Answering the latter question will actually provide the answer to the former.

```{r}
#| include: false
example_data <-
  dmp_adjs |>
  select(-symbol, -adj_ratio) |>
  filter(adj_amt != 0)

row <- 1
```


Taking the first value from above, we can imagine that if we purchased the stock at the closing price (\$`r round(example_data$lag_close[row], 4)`) on the trading day prior to `r round(example_data$date[row], 4)` and then sold at the closing price (\$`r round(example_data$close[row], 4)`) on the ex-dividend date, we could enjoy a capital appreciation of \$`r round(example_data$close[row] - example_data$lag_close[row], 4)` plus the dividend of \$`r example_data$adj_amt[row]` for a total per-share dollar return of \$`r round(example_data$close[row] - example_data$lag_close[row] + example_data$adj_amt[row], 4)`.
This implies a percentage return of `r round(100 * (example_data$close[row] - example_data$lag_close[row] + example_data$adj_amt[row]) / example_data$lag_close[row], 4)`%.

If we use the `adjusted` data directly we would divide `r round(example_data$adjusted[row], 4)` by `r round(example_data$lag_adjusted[row], 4)` and subtract `1` to get a percentage return of `r round(100 * (example_data$adjusted[row] / example_data$lag_adjusted[row] - 1), 4)`%.

Oh. There's slight difference here!

It can be shown that the returns on embedded in `adjusted` can be calculated as

$$ r_{t} = \frac{a_{t}}{a_{t-1}} - 1 = \frac{c_{t}}{c_{t-1} - d_{t}} - 1. $$ 
Checking this with $c_t = `r round(example_data$close[row], 4)`$, $c_{t-1} = `r round(example_data$lag_close[row], 4)`$, and $d_t = `r round(example_data$adj_amt[row], 4)`$, we get `r round(100 * (example_data$close[row]/ (example_data$lag_close[row] - example_data$adj_amt[row]) - 1), 4)`%.



```{r}
rets_df <-
  dmp_df |>
  group_by(symbol) |>
  arrange(date) |>
  mutate(ret_1 = close / lag(close) - 1,
         ret_2 = adjusted / lag(adjusted) - 1,
         adj_close = lag(close) * (1 + ret_2)) |>
  ungroup() |>
  mutate(close_diff = close - adjusted)

rets_df |>
  filter(abs(ret_1 - ret_2) > 0.000001)

rets_df |>
  filter(between(date, as.Date("2024-08-23"), as.Date("2024-08-30")))
```
